#+title: Test org mode
#+author: qiangqiang
#+TODO: TODO IN-PROGRESS DONE

Example [[http://orgmode.org][org-mode]] website using [[http://pages.gitlab.io/][GitLab Pages]].

* shortcuts

  + TAB / S-TAB – (un)fold
  + M-up/down – move a headline up or down
  + M-left/right – promote or demote a headline
  + M-RET – insert a new headline
  + S-left/right – cycle workflow
  + C-c / t – show TODOs in current document
  + C-c a - agenda
  + C-c [ - add current document to the list of agenda files
  + C-c ] – remove document from the list of agenda files
  + C-c . – add date
    - can use S-left/right to move date
  + C-u C-c . – add time and date
  + C-c C-c - add tag
  + C-c C-e - export menu

* working with sub-headings
** subheading1

** subheading2


* working with list
  Unordered lists start with -,+,or \*.
  Ordered lists start with a number and a dot.
  Descriptions use ::

* working with notes mark down

  You can make words *bold*, /italic/, _underlined_, =code= and ~verbatim~, and, if you must, +strike-through+

* working with TODO items

You can make any headings to TODO with the S-left/right binding (cycle through TODO states).

** define TODO states in the file

add the following to the begging of the org file

#+TODO: TODO IN-PROGRESS WAITING DONE

To activate the new workflow, either reopen the file, or go to the top of the file (any line starting with #) and press C-c C-c.

or we can change in the emacs config file


#+BEGIN_SRC emacs-lisp

(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))

#+END_SRC


** TODO but airplane

* Agendas
add a data to a heading and use C-c [ to add it to agenda.
if you want to remove, then use C-c ] to remoce.

** Call fred<2023-01-31 Tue>



* Tag

Tags are used to organize different kind of TODO-entries, for example all tasks on the phone, reading, shopping, etc.

To add tags, add the following to the top your document:
#+TAGS: { @OFFICE(o) @HOME(h) } COMPUTER(c) PHONE(p) READING(r)
Reload the document, or press C-c C-c on a line starting with #.


* Math formula

\begin{equation}                        % arbitrary environments,
x=\sqrt{b}                              % even tables, figures
\end{equation}                          % etc



* Export

* Test

#+BEGIN_SRC text

# bold symbols are termianl tokens

# ex: type t = int
tydec —> *type* type-id = ty

ty -> type-id
    -> * *{* * tyfields *}*    (*{* and *}* are termianl symbols)
    -> *array of* type-id

# declaration can derive type declaration, variable declarations and function declaration

dec -> tydec
    -> vardec
    -> fundec

#+END_SRC



